# Assignment 2
# Thomas Ogawa
# 2370770

import mysql.connector
import re
from mysql.connector import errorcode

# Connect to the database
try:
    db = mysql.connector.connect(
        host="34.94.33.188",
        user="root",
        passwd="^nIA$msu\"$2@oFFr",
        database="fall2023_cpsc408"
    )
    cursor = db.cursor()
    print("Connected to database")
except mysql.connector.Error as err:
    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
        print("Something is wrong with username or password")
    elif err.errno == errorcode.ER_BAD_DB_ERROR:
        print("Database does not exist")
    else:
        print(err)


# Function to List all products out of stock
def list_out_of_stock():
    cursor.execute("SELECT * FROM Products WHERE UnitsInStock = 0")
    result = cursor.fetchall()
    if(len(result) == 0):
        print("No products out of stock")
    for x in result:
        print(x)


# Function to Find the total number of orders places by each customer
def total_orders():
    cursor.execute("SELECT CustomerName, COUNT(OrderDetails.OrderId) "
                   "FROM Orders "
                   "JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID "
                   "JOIN Customers ON Orders.CustomerID = Customers.CustomerID "
                   "GROUP BY Customers.CustomerID")
    result = cursor.fetchall()
    if(len(result) == 0):
        print("No orders placed")
    for x in result:
        print(x)

# Function to Display the details of the most expensive product ordered in each order
def display_most_expensive():
    cursor.execute("SELECT OrderID, Products.ProductName, Products.ProductID, MAX(OrderDetails.UnitPrice) "
                   "FROM OrderDetails "
                   "JOIN Products ON OrderDetails.ProductID = Products.ProductID "
                   "GROUP BY OrderDetails.OrderID, Products.ProductName, Products.ProductID")
    result = cursor.fetchall()
    if(len(result) == 0):
        print("No orders placed")
    for x in result:
        print(x)


# Function to Retrieve a list of products that have never been ordered
def list_never_ordered():
    cursor.execute("SELECT * "
                   "FROM Products "
                   "WHERE ProductID NOT IN (SELECT ProductID FROM OrderDetails)")
    result = cursor.fetchall()
    if(len(result) == 0):
        print("All products have been ordered")
    for x in result:
        print(x)

# Function to Show the total revenue (price * quantity) generated by each supplier.
def total_revenue():
    cursor.execute("SELECT Suppliers.SupplierName, SUM(OrderDetails.UnitPrice * OrderDetails.Quantity) "
                   "FROM OrderDetails "
                   "JOIN Products ON OrderDetails.ProductID = Products.ProductID "
                   "JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID "
                   "GROUP BY Suppliers.SupplierName")
    result = cursor.fetchall()
    if(len(result) == 0):
        print("No revenue generated")
    for x in result:
        print(x)


# Function that calls stored procedure to add a new order
def add_order():
    # Get user input for customer ID
    while True:
        try:
            customer_id = int(input("Please enter the customer ID: "))
            break  # Exit the loop if input is valid
        except ValueError:
            print("Invalid input. Please enter a number ex.123.")

    # Get user input for product ID
    while True:
        try:
            product_id = int(input("Please enter the product ID: "))
            break  # Exit the loop if input is valid
        except ValueError:
            print("Invalid input. Please enter a number ex.123.")

    # Get user input for quantity
    while True:
        try:
            quantity = int(input("Please enter the quantity: "))
            break  # Exit the loop if input is valid
        except ValueError:
            print("Invalid input. Please enter a valid integer.")

    # Get user input for order date
    date_pattern = re.compile(r"\d{4}-\d{2}-\d{2}")
    while True:
        order_date = input("Please enter the order date (YYYY-MM-DD): ")
        if date_pattern.match(order_date):
            break  # Exit the loop if input is valid
        else:
            print("Invalid date format. Please use YYYY-MM-DD.")

    try:
        cursor.callproc("AddNewOrderAndUpdateStock", (customer_id, product_id, quantity, order_date))
        print("Order added successfully.")
    except Exception as err:
        print(f"Error Adding Order: {err}")
        return
    db.commit()

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    while True:
        print("1. List all products that are out of stock")
        print("2. Find the total number of orders for each customer")
        print("3. Display the details of the most expensive product ordered in each order")
        print("4. Retrieve a list of products that have never been ordered")
        print("5. Show the total revenue (price * quantity) generated by each supplier")
        print("6. Add new order")
        print("7. Exit")
        choice = int(input("Please enter a number: "))
        if choice == 1:
            list_out_of_stock()
        elif choice == 2:
            total_orders()
        elif choice == 3:
            display_most_expensive()
        elif choice == 4:
            list_never_ordered()
        elif choice == 5:
            total_revenue()
        elif choice == 6:
            add_order()
        elif choice == 7:
            db.close()
            break
        else:
            print("Invalid input. Please enter a choice (ex. \"1\" =  List out of stock products.")
